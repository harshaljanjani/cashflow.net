package db

// writing unit tests
import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/harshaljanjani/cashflow.net/db/util"
	"github.com/stretchr/testify/require"
	// sql "google.golang.org/genproto/googleapis/cloud/sql/v1beta4"
)

func createRandomAccount(t* testing.T) Account{
	// generate random values, avoid conflicts between unit tests (helps in the case of unique constraints)
	arg := CreateAccountParams{
		Owner: util.RandomOwner(),
		Balance: util.RandomMoney(),
		Currency: util.RandomCurrency(),
	}
	account, err := testQueries.CreateAccount(context.Background(), arg)
	require.NoError(t,err)
	require.NotEmpty(t,account)
	// check if the owner params are equal to the arg params
	require.Equal(t,arg.Owner,account.Owner)
	require.Equal(t,arg.Balance,account.Balance)
	require.Equal(t,arg.Currency,account.Currency)
	// account ID automatically generated by postgres
	require.NotZero(t,account.ID)
	// createdAt is filled with current timestamp
	require.NotZero(t,account.CreatedAt)

	return account
}

func TestCreateAccount(t *testing.T){
	createRandomAccount(t)
}

// note: write unit tests that are independent of each other
func TestGetAccount(t *testing.T){
	// create a new account
	account1 := createRandomAccount(t)
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)
	require.NoError(t, err)
	require.NotEmpty(t, account2)

	require.Equal(t,account1.ID,account2.ID)
	require.Equal(t,account1.Owner,account2.Owner)
	require.Equal(t,account1.Balance,account2.Balance)
	require.Equal(t,account1.Currency,account2.Currency)
	require.WithinDuration(t,account1.CreatedAt, account2.CreatedAt, time.Second)
}

func TestUpdateAccount(t * testing.T){
	account1 := createRandomAccount(t)
	arg := UpdateAccountParams{
		ID: account1.ID,
		Balance: util.RandomMoney(),
	}	
	account2, err := testQueries.UpdateAccount(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, account2)

	require.Equal(t,account1.ID,account2.ID)
	require.Equal(t,account1.Owner,account2.Owner)
	require.Equal(t,arg.Balance,arg.Balance)
	require.Equal(t,account1.Currency,account2.Currency)
	require.WithinDuration(t,account1.CreatedAt, account2.CreatedAt, time.Second)
}

func TestDeleteAccount(t *testing.T){
	account1 := createRandomAccount(t)
	err := testQueries.DeleteAccount(context.Background(), account1.ID)

	require.NoError(t, err)
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)
	require.Error(t, err)
	require.EqualError(t, err, sql.ErrNoRows.Error())
	require.Empty(t, account2)
}

func TestListAccount(t * testing.T){
	for i := 0; i<10; i++ {
		createRandomAccount(t)
	}
	arg := ListAccountsParams{
		Limit: 5,
		// skip 5, return next 5
		Offset: 5,
	}
	accounts, err := testQueries.ListAccounts(context.Background(), arg)
	require.NoError(t,err)
	require.Len(t,accounts,5)
	for _, accounts := range accounts{
		require.NotEmpty(t, accounts)
	}
}